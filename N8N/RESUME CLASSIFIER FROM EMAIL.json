{
  "name": "Mabelka Email IMAP",
  "nodes": [
    {
      "parameters": {
        "postProcessAction": "nothing",
        "downloadAttachments": true,
        "options": {}
      },
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [
        -200,
        -700
      ],
      "id": "7d925521-7583-48e4-8203-98b1ca5f4c4c",
      "name": "Email Trigger (IMAP)",
      "credentials": {
        "imap": {
          "id": "fxeVnAyjDUyHIo4g",
          "name": "IMAP account"
        }
      }
    },
    {
      "parameters": {
        "content": "# PRENDRE L'OFFRE",
        "height": 220,
        "width": 340,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1000,
        -860
      ],
      "id": "3b64c707-5ffd-479c-809d-883b56e1a328",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# EXTRAIRE INFO DU CV",
        "height": 220,
        "width": 540,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        -860
      ],
      "id": "ce1641b1-4e3b-408f-973e-0431792cce5c",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# CHANGER NOM",
        "height": 220,
        "width": 340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1920,
        -860
      ],
      "id": "5ddff7ac-4d44-4b38-b208-781326a0740c",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## Moving, Change Name, Creating sheet",
        "height": 440,
        "width": 580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3340,
        -860
      ],
      "id": "865b5ac4-9d4e-4500-b159-5d7de863f92f",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "# CONVERT TO NUMBER\n## pourcentage \n",
        "height": 260,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2880,
        -820
      ],
      "id": "afc57b3b-bf21-4872-8e13-225aa28581d9",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "359f93ba-437f-4dbc-9da7-217acfd588f4",
              "leftValue": "={{ $('Email Trigger (IMAP)').item.binary }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "8d32dbca-f4df-48bd-bf24-498452fc4946",
      "name": "Filter1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        20,
        -700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b6a4fbec-40d7-488d-bd90-a6425904f54a",
              "leftValue": "={{ $('Filter1').item.binary.attachment_0.fileExtension }}",
              "rightValue": "pdf",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        460,
        -700
      ],
      "id": "db1a3f10-266e-4eb2-8e74-796af0594825",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        880,
        -800
      ],
      "id": "dbfbd66e-61b1-4faf-be39-fd1d500c0e5a",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1jBzg-sraRNzPQVLdKzQXlClu4DM7blH6_SN7gE1FUm4",
          "mode": "list",
          "cachedResultName": "Offre emploi",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jBzg-sraRNzPQVLdKzQXlClu4DM7blH6_SN7gE1FUm4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jBzg-sraRNzPQVLdKzQXlClu4DM7blH6_SN7gE1FUm4/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Ref",
              "lookupValue": "={{ $('Email Trigger (IMAP)').item.json.subject }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1060,
        -800
      ],
      "id": "a48301ab-69e9-4de4-af94-2c3984386155",
      "name": "Google Sheets1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IjuX6O7mCP4KipqC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Vous êtes un expert en ressources humaines spécialisé dans l’analyse et la classification des CV.\n\nAnalysez la pertinence du CV ci-dessous par rapport à l’intitulé du poste, à sa description et à l’entreprise mentionnée.\n\nObjectif :\n1.  Déterminez si le profil est adapté au poste.\n2.  Fournissez une évaluation concise sur **une seule ligne** au format suivant, en utilisant \"|\" comme séparateur :\n\n    Nom : [Nom du candidat] | Email : [email] | Téléphone : [téléphone] | Ville : [ville] | Niveau d’études : [ex : Bac+3, Bac+5…] | **Niveau d’expérience : [Total des mois d’expérience calculé]** | Pourcentage d’adéquation : [0 à 100 %] | Commentaire : [Justification en français avec les points forts / points faibles / manques éventuels]\n\n3.  Si une information spécifique (Nom, Email, Téléphone, Ville, Niveau d’études) est **totalement absente** du texte du CV, indiquez \"Non renseigné\" **uniquement** pour ce champ spécifique.\n4.  **TRÈS IMPORTANT : Le champ \"Niveau d’expérience\" DOIT être calculé.** Vous devez **impérativement additionner la durée en mois de TOUTES les expériences listées dans la section \"EXPERIENCES PROFESSIONNELLE\" du CV.**\n    *   Calculez la durée de chaque expérience individuelle en mois (par exemple, 07/2023 - 09/2023 = 3 mois).\n    *   Additionnez toutes ces durées pour obtenir le total en mois.\n    *   **Incluez TOUTES les expériences listées (stages, emplois, etc.) dans ce calcul, même si elles ne sont pas directement pertinentes pour le poste visé.**\n    *   Le résultat doit être un nombre suivi du mot \"mois\" (ex : \"15 mois\").\n    *   **N'écrivez PAS \"Non renseigné\" pour le niveau d'expérience**, sauf si la section \"EXPERIENCES PROFESSIONNELLE\" est totalement vide ou absente du CV. Si aucune expérience n'est listée, indiquez \"0 mois\".\n\nTexte du CV du candidat :  \n{{ $('Extract from File1').item.json.text }}\n\nRemarque importante :\nLe poste à analyser est celui qui correspond à la référence mentionnée dans l'objet suivant :\n{{ $('Email Trigger (IMAP)').item.json.subject }}\n\nSi aucun poste correspondant à cette référence n’est identifié, ne procédez à aucune analyse du CV. Répondez simplement :\n\"Aucun poste correspondant — analyse non effectuée.\"\n\nCa c'est les offres que vous fire l'analyse correcpond au l ref :\n{{ $json.Ref }},{{ $json.Emploi }},{{ $json.Description }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1500,
        -800
      ],
      "id": "a03d6e44-3e2d-4595-83e4-e84a9fa64e58",
      "name": "Basic LLM Chain3"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1680,
        -560
      ],
      "id": "adaa8701-55be-4a2d-a176-ebeebf1b971a",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "Ne2SzjBYsbau3yXF",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  // Get the text from the LLM response\nconst text = item.json.text;\n\n\n  // Basic validation\n  if (!text || typeof text !== 'string') {\n    console.error(\"Missing or invalid LLM output text:\", text);\n    // Return an object indicating the error, adjust as needed\n    return { json: { error: \"Texte LLM manquant ou invalide\" } };\n  }\n\n  // Initialize an object to store the parsed data\n  const parsedData = {};\n  // Define expected keys based on your prompt (lowercase for matching)\n  // Use lowercase versions for robust matching, handle apostrophe variations\n  const keyMap = {\n      'nom': 'Nom',\n      'email': 'Email',\n      'téléphone': 'Téléphone',\n      'ville': 'Ville',\n      \"niveau d'études\": \"Niveau d’études\", // LLM might use ' or ’\n      \"niveau d’expérience\": \"Niveau d’expérience\", // LLM might use ' or ’\n      \"pourcentage d'adéquation\": \"Pourcentage d’adéquation\", // LLM might use ' or ’\n      'commentaire': 'Commentaire'\n  };\n  // Add alternate apostrophe spellings to the map pointing to the same target\n  keyMap[\"niveau d’études\"] = \"Niveau d’études\";\n  keyMap[\"niveau d’expérience\"] = \"Niveau d’expérience\";\n  keyMap[\"pourcentage d’adéquation\"] = \"Pourcentage d’adéquation\";\n\n\n  // Split the text into potential field sections based on \" | \"\n  const allStringParts = text.split(\" | \");\n\n  // Process each part\n  allStringParts.forEach((part, index) => {\n    const trimmedPart = part.trim();\n    if (!trimmedPart) return; // Skip empty parts if \" | | \" occurs\n\n    const separatorIndex = trimmedPart.indexOf(\" : \");\n\n    if (separatorIndex !== -1) {\n      // Found \" : \", so treat it as a key-value pair\n      let key = trimmedPart.substring(0, separatorIndex).trim().toLowerCase();\n      const value = trimmedPart.substring(separatorIndex + 3).trim(); // +3 to skip \" : \"\n\n      // Normalize different apostrophes in the key for matching\n      key = key.replace(/’/g, \"'\");\n\n      // Use the mapped key if available, otherwise keep the original (lowercase)\n      const outputKey = keyMap[key] || key; // Fallback to the extracted key if not in map\n      parsedData[outputKey] = value;\n\n    } else if (index === 0 && !parsedData['Nom']) {\n       // Did NOT find \" : \" AND it's the very first part AND \"Nom\" hasn't been set explicitly yet\n       // Assume this first part IS the name.\n       parsedData['Nom'] = trimmedPart;\n    }\n    // Ignore parts without \" : \" if they are not the first one, or if name already found\n  });\n\n  // Ensure all expected fields exist, setting default if missing\n  const finalOutput = {};\n  const expectedOutputKeys = [\n      'Nom', 'Email', 'Téléphone', 'Ville',\n      'Niveau d’études', 'Niveau d’expérience',\n      'Pourcentage d’adéquation', 'Commentaire'\n  ];\n\n  expectedOutputKeys.forEach(key => {\n      finalOutput[key] = parsedData[key] || \"Non renseigné\";\n  });\n\n  // Return the structured data\n  return {\n    json: finalOutput\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        -800
      ],
      "id": "beef6b78-4612-430c-b0fc-29e13ee19147",
      "name": "Code2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert HR resume classifier. Review the resume text provided below and complete the following tasks:\n\nExtract the Candidate’s Name: Identify the candidate's full name from the resume text.\n\n\n\nFormat the Output: Return your result in this exact format:\n25 CV [Candidate Name]\nFor example:\n'25 CV John Doe'\n\nResume Text:\n{{ $('Extract from File1').item.json.text }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1940,
        -800
      ],
      "id": "5e6e88a5-9ea6-457a-be5c-46a8075d6be0",
      "name": "Basic LLM Chain4"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2024,
        -580
      ],
      "id": "db066743-8c64-4079-8c55-a77b978f21c7",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "Ne2SzjBYsbau3yXF",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert HR resume classifier with a focus on evaluating professional experience. Your task is to thoroughly review the provided resume text and calculate the total number of months of professional experience listed within the resume. Follow these steps to complete the task:\n\nTask Overview:\nExtract the Relevant Job Experience:\n\nIdentify the positions listed within the resume.\n\nLook for the start and end dates of each job or the current employment status if the person is still employed.\n\nCapture the job title, company name, and dates.\n\nCalculate the Duration for Each Job:\n\nFor each job, calculate the number of months between the start date and the end date. If the person is currently employed, use the current date to determine the end date.\n\nIf the start or end date includes a specific day, ignore the days and focus on the months and years.\n\nIf only the month and year are provided, calculate the number of months between the two dates.\n\nSum the Total Months of Experience:\n\nAfter calculating the duration of each job in months, add up all the durations to get the total number of months of professional experience across all jobs.\n\nProvide a Clear Summary:\n\nAfter completing the calculations, summarize the total number of months of experience in a simple and clear format like \"41 months.\"\n\nImportant Note :  dont include intership or stage in the expereince when calculating it, only professional job experience.\nExample:\nGiven a resume text like this:\n\n1. Software Engineer, XYZ Corp (March 2020 - December 2022)\n   - Developed and implemented new features for the company's main product.\n\n2. Junior Developer, ABC Solutions (January 2018 - February 2020)\n   - Assisted in coding and maintaining software systems for clients.\n\n3. Intern, Tech Innovations (June 2017 - August 2017)\n   - Supported senior developers with project tasks and bug fixing.\nSteps to Follow:\n\nFor Job 1 (XYZ Corp):\n\nStart date: March 2020\n\nEnd date: December 2022\n\nDuration: From March 2020 to December 2022 → 33 months\n\nFor Job 2 (ABC Solutions):\n\nStart date: January 2018\n\nEnd date: February 2020\n\nDuration: From January 2018 to February 2020 → 25 months\n\nFor Job 3 (Tech Innovations):\n\nStart date: June 2017\n\nEnd date: August 2017\n\nDuration: From June 2017 to August 2017 → 3 months\n\nTotal Experience Calculation:\nTotal months of experience = 33 months (Job 1) + 25 months (Job 2) + 3 months (Job 3) = 61 months of experience.\n\nResume Text to Analyze:\n{{ $('Extract from File1').item.json.text }}\n\nThe output should be in the following format:\nX Mois"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2320,
        -800
      ],
      "id": "a9b453da-c172-4572-bc23-b2a376cf539a",
      "name": "Basic LLM Chain5"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2400,
        -580
      ],
      "id": "c6fc3324-25d4-4a71-a0ac-0b78abe70e4a",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "Ne2SzjBYsbau3yXF",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5852bcc9-3974-4a17-a8b0-54e228d857b3",
              "leftValue": "={{ $json.pourcentage_numeric }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3128,
        -700
      ],
      "id": "9861711c-ff63-436d-bec5-bc1833d0a263",
      "name": "If3"
    },
    {
      "parameters": {
        "jsCode": "// Get ALL items from the 'Code2' node\nconst inputItems = $('Code2').all(); // <-- Changed from .first() to .all()\nconst results = []; // <-- Initialize an array to hold results\n\nconsole.log(`Received ${inputItems.length} items from Code2.`); // Optional: Debug log\n\nlet itemIndex = 0; // Optional: For clearer logging\n\n// Loop through each item received from Code2\nfor (const item of inputItems) {\n  console.log(`Processing item index ${itemIndex}:`, JSON.stringify(item)); // Optional: Debug log\n\n  // Extract the percentage string from the CURRENT item's JSON data\n  // Use optional chaining (?.) in case item.json is missing\n  const pourcentageStr = item.json?.['Pourcentage d’adéquation'] || '';\n  console.log(`-- Extracted string: \"${pourcentageStr}\"`); // Optional: Debug log\n\n  // Clean it up: remove %, replace comma with period (for locale safety), trim whitespace\n  const cleanedStr = pourcentageStr.replace('%', '').replace(',', '.').trim();\n\n  // Attempt to convert the cleaned string to a number using parseFloat\n  const numericPourcentage = parseFloat(cleanedStr);\n  console.log(`-- Attempted parse on \"${cleanedStr}\", result: ${numericPourcentage}`); // Optional: Debug log\n\n  // Check if the conversion resulted in a valid number (not NaN)\n  if (!isNaN(numericPourcentage)) {\n    // If valid, push the numeric value to the results array\n    results.push({ pourcentage_numeric: numericPourcentage });\n    console.log(`-- Added result: ${numericPourcentage}`); // Optional: Debug log\n  } else {\n    // If invalid (NaN), push an error or null value to maintain item correspondence\n    // Choose one of the following push lines depending on desired output for errors:\n    results.push({ pourcentage_numeric: null, error: `Invalid/missing percentage in item ${itemIndex}` }); // Option 1: Include null and error message\n    // results.push({ pourcentage_numeric: null }); // Option 2: Just include null\n    // Option 3: Don't push anything if you only want valid results (results array length might not match input length)\n    console.log(`-- Failed to parse percentage, adding error/null.`); // Optional: Debug log\n  }\n\n  itemIndex++; // Optional: Increment index for logging\n}\n\nconsole.log(`Finished processing. Returning ${results.length} results.`); // Optional: Debug log\n\n// Return multiple results — one for each input item processed\nreturn results.map(res => ({ json: res })); // <-- Format output as a list of JSON objects"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2900,
        -700
      ],
      "id": "c563ccd2-1130-41d7-b636-18646a8a8b35",
      "name": "Code5"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM",
          "mode": "list",
          "cachedResultName": "Liste des Candidats",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Nom": "={{ $('Code2').item.json.Nom }}",
            "Ville": "={{ $('Code2').item.json.Ville }}",
            "Email": "={{ $('Code2').item.json.Email }}",
            "Emploi": "={{ $('Google Sheets1').item.json.Emploi }}",
            "CV": "={{ $('Google Drive3').item.json.webViewLink }}",
            "Téléphone ": "={{ \"'\"+$('Code2').item.json[\"Téléphone\"] }}",
            "Formation": "={{ $('Code2').item.json['Niveau d’études'] }}",
            "Expérience ": "={{ $('Code3').item.json.totalMonths }}",
            "Pourcentage ": "={{ $('Code5').item.json.pourcentage_numeric }}",
            "Commentaire ": "={{ $('Code2').item.json.Commentaire }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Nom",
              "displayName": "Nom",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Emploi",
              "displayName": "Emploi",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ville",
              "displayName": "Ville",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Téléphone ",
              "displayName": "Téléphone ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Formation",
              "displayName": "Formation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Expérience ",
              "displayName": "Expérience ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Pourcentage ",
              "displayName": "Pourcentage ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Commentaire ",
              "displayName": "Commentaire ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CV",
              "displayName": "CV",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3560,
        -600
      ],
      "id": "856a6c55-6e00-4338-965a-a8614147d75f",
      "name": "Google Sheets9",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IjuX6O7mCP4KipqC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "inputDataFieldName": "attachment_0",
        "name": "={{ $binary.attachment_0.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1isr4W23tx6exsl9BjrSe8Fqd1_-zi0XI",
          "mode": "list",
          "cachedResultName": "Z-No Ref",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1isr4W23tx6exsl9BjrSe8Fqd1_-zi0XI"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        240,
        -700
      ],
      "id": "bec4119b-b423-4250-b744-b2a7f460fe99",
      "name": "Google Drive2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Google Drive3').item.json.id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1pvopYXDsAboHdPvtYF9b3ZcEEjj10-M5",
          "mode": "list",
          "cachedResultName": "Moins de 70%",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1pvopYXDsAboHdPvtYF9b3ZcEEjj10-M5"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3380,
        -600
      ],
      "id": "af6e946a-f6c4-4e33-9171-4d1777e186ca",
      "name": "Google Drive1",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Google Drive2').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        680,
        -800
      ],
      "id": "a8c355f3-229a-48a7-a158-2a13c987a6e1",
      "name": "Google Drive3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM",
          "mode": "list",
          "cachedResultName": "Liste des Candidats",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11GDGgfjxK5cJTmFIzu8aw5uE7wX-o8-GAb9x3ryqFDM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Nom": "={{ $('Code2').item.json.Nom }}",
            "Ville": "={{ $('Code2').item.json.Ville }}",
            "Email": "={{ $('Code2').item.json.Email }}",
            "Emploi": "={{ $('Google Sheets1').item.json.Emploi }}",
            "Téléphone ": "={{ \"'\"+$('Code2').item.json[\"Téléphone\"] }}",
            "Formation": "={{ $('Code2').item.json['Niveau d’études'] }}",
            "Expérience ": "={{ $('Code3').item.json.totalMonths }}",
            "Pourcentage ": "={{ $('Code5').item.json.pourcentage_numeric }}",
            "Commentaire ": "={{ $('Code2').item.json.Commentaire }}",
            "CV": "={{ $('Google Drive3').item.json.webViewLink }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Nom",
              "displayName": "Nom",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Emploi",
              "displayName": "Emploi",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ville",
              "displayName": "Ville",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Téléphone ",
              "displayName": "Téléphone ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Formation",
              "displayName": "Formation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Expérience ",
              "displayName": "Expérience ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Pourcentage ",
              "displayName": "Pourcentage ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Commentaire ",
              "displayName": "Commentaire ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CV",
              "displayName": "CV",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3560,
        -800
      ],
      "id": "e47e7e2e-745b-4e94-9552-c75d8a550aae",
      "name": "Google Sheets10",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IjuX6O7mCP4KipqC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Google Drive3').item.json.id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "16lcr4IZJWUOu1RPTqaNaFMV9KAchclc1",
          "mode": "list",
          "cachedResultName": "Plus de 70%",
          "cachedResultUrl": "https://drive.google.com/drive/folders/16lcr4IZJWUOu1RPTqaNaFMV9KAchclc1"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3400,
        -800
      ],
      "id": "84298036-18a9-433b-9b65-af668fb0cacc",
      "name": "Google Drive4",
      "retryOnFail": true,
      "maxTries": 5,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fromEmail": "recrutement@mabelka.com",
        "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
        "subject": "Votre Candidature",
        "html": "<p>\nBonjour,<br><br>\n\nNous avons bien reçu votre candidature. Cependant, le fichier que vous avez envoyé n’est pas compatible avec notre système.<br><br>\n\nNous vous prions de bien vouloir nous faire parvenir votre CV au format PDF afin que nous puissions l’ouvrir correctement et poursuivre l’étude de votre dossier.<br><br>\n\nNous vous remercions de votre compréhension.<br><br>\n\nCordialement,<br>\nMABELKA</p>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        740,
        -360
      ],
      "id": "f260e434-4ea1-48c3-8a9d-1953654c5310",
      "name": "Send Email",
      "webhookId": "24792821-ef28-4099-850c-f0cf1bfc7825",
      "credentials": {
        "smtp": {
          "id": "FGjdrK07wYPP3P71",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "content": "# CALCUL EXP",
        "height": 300,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2300,
        -860
      ],
      "id": "bdae599e-94ed-43a8-aa1b-eefec4455649",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "jsCode": "// This assumes input items might contain an ARRAY of texts under item.json.text\nconst inputs = $input.all(); // Get all input items (might be just one aggregated item)\nconst results = [];\n\n// --- DEBUGGING ---\nconsole.log(`Received ${inputs.length} input items.`);\n// ---------------\n\nconst regex = /\\b(\\d+)\\s*(mois|months)\\b/gi; // Added 'i' flag for case-insensitivity, just in case\n\nlet itemIndex = 0;\nfor (const item of inputs) { // Loop through each incoming item (even if there's only one)\n  // --- DEBUGGING ---\n  console.log(`Processing input item index ${itemIndex}:`, JSON.stringify(item));\n  // ---------------\n\n  // Get the text data. IMPORTANT: Check if it's an array!\n  const textData = item.json?.text || item.text;\n\n  // Determine if we have a single string or an array of strings\n  const textsToProcess = Array.isArray(textData) ? textData : [textData || '']; // Make it an array even if it's a single string or empty\n\n  // --- DEBUGGING ---\n  console.log(`Found ${textsToProcess.length} text blocks within item ${itemIndex}.`);\n  // ---------------\n\n  let textBlockIndex = 0;\n  for (const responseText of textsToProcess) { // *** INNER LOOP: Process each text block ***\n    // --- DEBUGGING ---\n    console.log(`-- Processing text block index ${textBlockIndex} of item ${itemIndex}: \"${responseText}\"`);\n    // ---------------\n\n    let match;\n    let lastMatchValue = null;\n    regex.lastIndex = 0; // Reset regex state for each text block\n\n    while ((match = regex.exec(responseText)) !== null) {\n      lastMatchValue = match[1]; // Capture the number part of the *last* match found IN THIS BLOCK\n      // --- DEBUGGING ---\n      console.log(`---- Found match: ${match[0]}, Number: ${match[1]}`);\n      // ---------------\n    }\n\n    if (lastMatchValue !== null) {\n      results.push({ totalMonths: `${lastMatchValue} mois` });\n      // --- DEBUGGING ---\n      console.log(`---- Added result: ${lastMatchValue} mois`);\n      // ---------------\n    } else {\n      results.push({ error: \"Total months not found in this text block\" });\n      // --- DEBUGGING ---\n      console.log(\"---- No match found in this text block, adding error.\");\n      // ---------------\n    }\n    textBlockIndex++;\n  } // End of inner loop (processing text blocks)\n\n  itemIndex++;\n} // End of outer loop (processing input items)\n\n// --- DEBUGGING ---\nconsole.log(`Returning ${results.length} results total.`);\n// ---------------\n\n// Return multiple results — one per text block processed\nreturn results.map(res => ({ json: res }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2680,
        -700
      ],
      "id": "64c4b224-4c94-49a2-84d3-b232b56be499",
      "name": "Code3"
    },
    {
      "parameters": {
        "content": "# Filtre with attachement \n## Moving to brute folder",
        "height": 260,
        "width": 460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -20,
        -800
      ],
      "id": "0042b038-b466-4d85-8b7d-8df24204a773",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Download from Drive \n## Reading PDF\n\n\n",
        "height": 280,
        "width": 360,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        -920
      ],
      "id": "2fcc77f4-ffc2-4541-b50d-81d8dcdb3ebd",
      "name": "Sticky Note17"
    },
    {
      "parameters": {
        "content": "# Sending Email to Change the file to PDF\n\n",
        "height": 360,
        "width": 420,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        -540
      ],
      "id": "158ab9d0-d301-48c0-b6ec-6c9abd5913af",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Google Drive1').item.json.id }}",
          "mode": "id"
        },
        "newUpdatedFileName": "={{ $('Basic LLM Chain4').item.json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3780,
        -600
      ],
      "id": "2f2c60df-7b10-46bc-9c62-b9432b1959c5",
      "name": "Google Drive7",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Google Drive4').item.json.id }}",
          "mode": "id"
        },
        "newUpdatedFileName": "={{ $('Basic LLM Chain4').item.json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3780,
        -800
      ],
      "id": "68d7a8e5-287b-4e45-8986-7094eda05231",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "mzeGpXjWcMgaZnlw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "recrutement@mabelka.com",
        "toEmail": "={{ $('Email Trigger (IMAP)').item.json.from }}",
        "subject": "Votre Candidature",
        "html": "=<p>\nBonjour,<br><br>\n\nNous avons bien reçu votre candidature. Cependant, vous n'avez pas mentionné quelle ref sur le sujet du mail.<br><br>\n\nNous vous remercions de votre compréhension.<br><br>\n\nCordialement,<br>\nMABELKA</p>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1260,
        -360
      ],
      "id": "86ebf79e-f1ab-4b23-ae0d-976c382316a6",
      "name": "Send Email1",
      "webhookId": "df241f9a-db0d-4f58-a619-a7416622fc53",
      "credentials": {
        "smtp": {
          "id": "FGjdrK07wYPP3P71",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Sending Email to get the REF\n\n\n",
        "height": 360,
        "width": 400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        -540
      ],
      "id": "35ecdd31-7ece-4b2a-af94-190599630394",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2feecc22-3bb2-4b34-a811-cefc740cdc7e",
              "leftValue": "={{ $json.Ref }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1220,
        -800
      ],
      "id": "ce7cd4cf-dd04-4c45-8b95-666d88e69090",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "Email Trigger (IMAP)": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Google Drive2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Basic LLM Chain4": {
      "main": [
        [
          {
            "node": "Basic LLM Chain5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain5": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Google Drive4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Google Sheets9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive4": {
      "main": [
        [
          {
            "node": "Google Sheets10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets10": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets9": {
      "main": [
        [
          {
            "node": "Google Drive7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "60187f8e-d6d8-408b-aa59-4fbdbcfa1b07",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e6583a395e5b1c97688693524f9ad8ee3634a2c179e3adecba31d3d84dea50b0"
  },
  "id": "33fRRE8QSwG83V6y",
  "tags": []
}